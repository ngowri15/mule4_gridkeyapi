#%RAML 0.8
title: GridKey API
version: v2
baseUri: https://api.gridkey.cloud
mediaType: application/json
/v2:
  /generateAccessToken:
    post:
      description: Generates an access token for authentication
      responses:
        200:
          body:
            example: Generated Token
     
  /{dno}:
    get:
      description: Lists the MCUs available for the specified DNO along with any extra information about the specified DNO   
      responses:
        200:
          body:
            example: |
              {
                "dno": "LUCYDEMO",
                "mcus": [
                  {
                    "name": "TestMCU",
                    "description": "MCU used for Testing",
                    "unit-type": "gridkey-mcu520",
                    "unit-sn": "000123456789"
                    
                  },
                  {
                    "name": "MCUTest",
                    "description": "Another MCU used for Testing",
                    "unit-type": "gridkey-mcu520",
                    "unit-sn": "000987654321"
                  }
                ]
              }
              
    /dashboard:
      get:
        description: Gets the dashboard data for the DNO for all MCUs. This includes measurement snapshots of the latest decoded data for each MCU
        responses:
          200:
            body:
              example: |
                {
                  "dno": "LUCYDEMO",
                  "mcus": [
                    {
                      "unit-sn": "000443111432",
                      "busbar-l1-voltage-mean": "245.5",
                      "busbar-l2-voltage-mean": "243.2",
                      "busbar-l3-voltage-mean": "233.1",
                      "busbar-l1-current-mean": "23.3",
                      "busbar-l2-current-mean": "90.4",
                      "busbar-l3-current-mean": "14.9" 
                    },
                    {
                      "unit-sn": "000452141142",
                      "busbar-l1-voltage-mean": "235.5",
                      "busbar-l2-voltage-mean": "253.2",
                      "busbar-l3-voltage-mean": "243.1",
                      "busbar-l1-current-mean": "33.2",
                      "busbar-l2-current-mean": "60.9",
                      "busbar-l3-current-mean": "84.9"
                    },
                    {
                      "unit-sn": "000543122562",
                      "busbar-l1-voltage-mean": "235.1",
                      "busbar-l2-voltage-mean": "233.3",
                      "busbar-l3-voltage-mean": "225.6",
                      "busbar-l1-current-mean": "13.1",
                      "busbar-l2-current-mean": "50.0",
                      "busbar-l3-current-mean": "184.4"
                    }
                  ]                
                }
                
      /{mcu}:
        get:
          description: Gets the dashboard data for the specific MCU in a DNO. This includes measurement snapshots of the latest decoded data
          responses:
            200:
              body:
                example: |
                  {
                    "dno": "LUCYDEMO",
                    "unit-sn": "000443111432",
                    "busbar-l1-voltage-mean": "245.5",
                    "busbar-l2-voltage-mean": "243.2",
                    "busbar-l3-voltage-mean": "233.1",
                    "busbar-l1-current-mean": "23.3",
                    "busbar-l2-current-mean": "90.4",
                    "busbar-l3-current-mean": "14.9" 
                  }                
              
    /{mcu}:
      get:
        description: Gets details about the MCU specified
        responses:
          200:
            body:
              example: |
                {
                  "dno": "LUCYDEMO",
                  "name": "TestMCU",
                  "description": "MCU used for Testing",
                  "unit-type": "gridkey-mcu520",
                  "unit-sn": "000123456789"
                }

    /{mcu}/decoded/{start}/{end}/{params}:
      get:
        description:  Returns all of the specified decoded message parameters between the start and end time specified. Format of start and end times are as follows - YYMMDDhhmmss 
        responses:
          200:
            body:              
                example: |
                  {
                    "dno": "LUCYDEMO",
                    "mcu": "000123456789",
                    "timeStart": "20140908102900",
                    "timeEnd": "20140908103000",
                    "data": [
                      {
                        "datetime": "140905000000",
                        "Busbar L1 Mean Voltage": "239.8",                       
                        "Busbar L2 Mean Voltage": "239.8"
                      },
                      {
                        "datetime": "140906000000",
                        "Busbar L1 Mean Voltage": "239.8",                       
                        "Busbar L2 Mean Voltage": "239.8"
                      }
                    ]
                  } 

    /{mcu}/raw/{date}/{type}:
      get:
        description: Returns the specified raw message. Which message is returned depends on the type supplied i.e. 'statistical', 'instantaneous', 'user', 'alert' etc. In addition to the raw 'data' section, the 'dno', 'mcu' and message 'type' are returned in separate fields. To get the most recent config message in its raw form, use the alternative API call for config messages i.e. '/{mcu}/config/{config-type}/now/raw'
        responses:
          200:
            body:
              example: |
                {
                  "dno": "LUCYDEMO",
                  "mcu": "000303230156",
                  "type": "statistical",
                  "datetime": "140905000000",
                  "data":[  
                    {


                    }
                  ]
                }

    /{mcu}/available/{year}:
      get:
        description: Returns the dates in which periodic data is available in the given year
        responses:
          200:
            body:
              example: |
                {
                  "dno": "LUCYDEMO",
                  "mcu": "000123456789",
                  "year": "2016",
                  "1":
                    [
                      "1",
                      "2",
                      "3",
                      "4",
                      "5",
                      "6"
                    ],
                    "2":
                    [
                    ],
                    "3":
                    [
                    ],
                    "4":
                    [
                    ],
                    "5":
                    [
                    ],
                    "6":
                    [
                    ],
                    "7":
                    [
                    ],
                    "8":
                    [
                    ],
                    "9":
                    [
                    ],
                    "10":
                    [
                    ],
                    "11":
                    [
                    ],
                    "12":
                    [
                    ]
                }
                               
      /{month}:
        get:
          description: Returns the dates in which periodic data is available in the given month
          responses:
            200:
              body:
                example: |
                  {
                    "dno": "LUCYDEMO",
                    "mcu": "000303230156",
                    "year": "2016",
                    "1":
                    [
                      "1",
                      "2",
                      "3",
                      "4",
                      "5",
                      "6"
                    ]
                  }
                 
    /summary/{start}/{end}:                 
        get:
          description: Returns the json string with summary of DTF events.
          responses:
            200:
              body:
                example: |
                  {
                    "dno": "1212",
                    "summary": [
                      {
                        "Total Events": "2632",
                        "feeder1": "41",
                        "feeder2": "142",
                        "feeder3": "156",
                        "feeder4": "2293",
                        "feeder5": "0",
                        "substation name": "Victoria Rd Dist."
                      },
                      {
                        "Total Events": "6",
                        "feeder1": "0",
                        "feeder2": "1",
                        "feeder3": "4",
                        "feeder4": "1",
                        "feeder5": "0",
                        "substation name": "BoundaryRd#2"
                      }
                      ]
                  }                 
    /{mcu}/histogram/{start}/{end}:                 
      get:
        description: Returns the json string with base64 string representating image of DTF histograms.
        responses:
          200:
            body:
              example: |
                {
                  "mcu": "104207194030",                  
                  "substation-name": "Victoria Rd Dist",
                  "base64": "base64 string of image"                  
                }
    /{mcu}/histogramV1/{start}/{end}/{param}:                 
      get:
        description: Returns the json string with base64 string representating image of DTF histograms.
        responses:
          200:
            body:
              example: |
                {
                    "mcu": "104207194030",
                    "substation-name": "Victoria Rd Dist.",
                    "remarks": "success",
                    "base64": [
                      "base64 file string"
                    ]
                }
                
    /{mcu}/chronologyplot/{start}/{end}:                 
          get:
            description: Returns the json string with base64 string representating image of DTF histograms.
            responses:
              200:
                body:
                  example: |
                    {
                      "mcu": "104207194030",                  
                      "substation-name": "Victoria Rd Dist",
                      "base64": "base64 string of image"                  
                    } 
    /{mcu}/reports:                 
          get:
            description: Returns the json response with all the report details of specific DNO .
            responses:
              200:
                body:
                  example: |
                    {
                        "Quaterlyreports": {
                               "FILE NAME" : "URL"
                               "FILE NAME" : "URL"
                               "FILE NAME" : "URL"
                               "FILE NAME" : "URL"
                         },
                         "Ondemandreports":[
                                 "reporttype" : {
                                     "FILE NAME" : "URL"
                                  },
                                  "reporttype" : {
                                     "FILE NAME" : "URL"
                                  }
                         ] 
                    } 
                    
    /{mcu}/generatereport/{start}/{end}/{param}:                 
            get:
              description: Synchronously Trigger the reports Execution and return the response.
              responses:
                200:
                  body:
                    example: |
                      {
                        "status": "success"                
                      } 
    /{mcu}/prediction/{start}/{end}/{param}:                 
            get:
              description: End point to execute and collect all prediction response from py scripts.
              responses:
                200:
                  body:
                    example: |
                      {
                        "status": "success"                
                      }                 
                     
  /downloadreports/{param}:                 
          get:
            description: Returns the PDF report as per the specified DNO and MCU.
            responses:
              200:
                body:
                     example: PDF file download             
                                    